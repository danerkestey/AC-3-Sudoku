{"ast":null,"code":"var _jsxFileName = \"/Users/saifal-dinali/Desktop/Projects/School Projects/CP468/AC-3-Sudoku/src/components/SudokuSolver.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Row, Col, Button, FormCheck, Card } from \"react-bootstrap\";\nimport Board from \"./Board\";\nimport sudokuService, { EMPTY_GRID, EMPTY_START_GRID } from \"../sudokuService\";\nimport storageService from \"../storageService\";\nexport default function SudokuSolver() {\n  const [grid, setGrid] = useState(EMPTY_GRID);\n  const [startGrid, setStartGrid] = useState(EMPTY_START_GRID);\n  const [isGridDisabled, setIsGridDisabled] = useState(false);\n  const [isShowProcessChecked, setIsShowProcessChecked] = useState(true);\n  const [isSolved, setIsSolved] = useState(false);\n  const [isSolving, setIsSolving] = useState(false);\n  const progressSpeed = 5;\n  useEffect(() => {\n    const storageBoard = storageService.getBoard();\n    if (storageBoard) setGrid(storageBoard);\n  }, []);\n\n  const handleValueChange = (e, id) => {\n    const {\n      value\n    } = e.target;\n\n    if (value <= 9 && value > 0 || value === \"\") {\n      const position = id.split(\",\");\n      const newGrid = grid.map(arr => arr.slice());\n      if (value === \"\") newGrid[position[0]][position[1]] = 0;else newGrid[position[0]][position[1]] = Number(value);\n      setGrid(newGrid);\n      storageService.setBoard(newGrid);\n    }\n  };\n\n  const showProgress = async progress => {\n    setIsGridDisabled(true);\n\n    for (const grid of progress) {\n      setGrid(grid);\n      await new Promise(resolve => setTimeout(resolve, progressSpeed));\n    }\n\n    setIsSolved(true);\n    setIsSolving(false);\n  };\n\n  const handleSolveButtonClicked = () => {\n    setIsSolving(true);\n    setIsSolved(false);\n    setStartGrid(grid.map(arr => arr.slice()));\n    const progress = sudokuService.solve(grid);\n\n    if (isShowProcessChecked) {\n      showProgress(progress);\n    } else {\n      setIsGridDisabled(true);\n      setGrid(progress[progress.length - 1]);\n      setIsSolved(true);\n      setIsSolving(false);\n    }\n  };\n\n  const reset = () => {\n    setGrid(EMPTY_GRID);\n    setStartGrid(EMPTY_START_GRID);\n    setIsGridDisabled(false);\n    setIsSolved(false);\n    storageService.setBoard(EMPTY_GRID());\n  };\n\n  const undo = () => {\n    setIsGridDisabled(false);\n    setGrid(startGrid);\n    setStartGrid(EMPTY_START_GRID);\n    setIsSolved(false);\n  };\n\n  return /*#__PURE__*/React.createElement(Row, {\n    className: \"mt-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: 8,\n    className: \"mb-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Board, {\n    startGrid: startGrid,\n    grid: grid,\n    onChange: handleValueChange,\n    disabled: isGridDisabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    lg: true,\n    className: \"mb-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    className: \"shadow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Card.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"dark\",\n    disabled: isSolving,\n    onClick: () => {\n      reset();\n      const randomGrid = sudokuService.getRandomExample();\n      setGrid(randomGrid);\n      storageService.setBoard(randomGrid);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, \"Randomly Generated Board\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }), isSolving ? /*#__PURE__*/React.createElement(Button, {\n    className: \"mt-3\",\n    variant: \"dark\",\n    onClick: () => window.location.reload(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 15\n    }\n  }, \"Stop\") : /*#__PURE__*/React.createElement(Button, {\n    className: \"mt-3\",\n    variant: \"dark\",\n    onClick: handleSolveButtonClicked,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 15\n    }\n  }, \"Solve\"), /*#__PURE__*/React.createElement(FormCheck, {\n    className: \"mt-3\",\n    type: \"checkbox\",\n    label: \"Show solving process\",\n    disabled: isSolving,\n    checked: isShowProcessChecked,\n    onChange: e => setIsShowProcessChecked(e.target.checked),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }), isShowProcessChecked ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"mt-3 text-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 15\n    }\n  }, \"If you show solving process on difficult sudoku puzzles it can take very long time. Uncheck show solving process if you wanna solve difficult puzzles.\") : \"\", /*#__PURE__*/React.createElement(Button, {\n    className: \"mt-3 mr-1\",\n    variant: \"dark\",\n    disabled: isSolving,\n    onClick: reset,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }, \"Clear\"), /*#__PURE__*/React.createElement(Button, {\n    className: \"mt-3 ml-1\",\n    variant: \"dark\",\n    disabled: !isSolved,\n    onClick: undo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-undo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 15\n    }\n  }))))));\n}","map":{"version":3,"sources":["/Users/saifal-dinali/Desktop/Projects/School Projects/CP468/AC-3-Sudoku/src/components/SudokuSolver.js"],"names":["React","useEffect","useState","Row","Col","Button","FormCheck","Card","Board","sudokuService","EMPTY_GRID","EMPTY_START_GRID","storageService","SudokuSolver","grid","setGrid","startGrid","setStartGrid","isGridDisabled","setIsGridDisabled","isShowProcessChecked","setIsShowProcessChecked","isSolved","setIsSolved","isSolving","setIsSolving","progressSpeed","storageBoard","getBoard","handleValueChange","e","id","value","target","position","split","newGrid","map","arr","slice","Number","setBoard","showProgress","progress","Promise","resolve","setTimeout","handleSolveButtonClicked","solve","length","reset","undo","randomGrid","getRandomExample","window","location","reload","checked"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Row, Col, Button, FormCheck, Card } from \"react-bootstrap\";\nimport Board from \"./Board\";\nimport sudokuService, { EMPTY_GRID, EMPTY_START_GRID } from \"../sudokuService\";\nimport storageService from \"../storageService\";\n\nexport default function SudokuSolver() {\n  const [grid, setGrid] = useState(EMPTY_GRID);\n  const [startGrid, setStartGrid] = useState(EMPTY_START_GRID);\n  const [isGridDisabled, setIsGridDisabled] = useState(false);\n  const [isShowProcessChecked, setIsShowProcessChecked] = useState(true);\n  const [isSolved, setIsSolved] = useState(false);\n  const [isSolving, setIsSolving] = useState(false);\n  const progressSpeed = 5;\n\n  useEffect(() => {\n    const storageBoard = storageService.getBoard();\n    if (storageBoard) setGrid(storageBoard);\n  }, []);\n\n  const handleValueChange = (e, id) => {\n    const { value } = e.target;\n    if ((value <= 9 && value > 0) || value === \"\") {\n      const position = id.split(\",\");\n      const newGrid = grid.map((arr) => arr.slice());\n      if (value === \"\") newGrid[position[0]][position[1]] = 0;\n      else newGrid[position[0]][position[1]] = Number(value);\n      setGrid(newGrid);\n      storageService.setBoard(newGrid);\n    }\n  };\n\n  const showProgress = async (progress) => {\n    setIsGridDisabled(true);\n    for (const grid of progress) {\n      setGrid(grid);\n      await new Promise((resolve) => setTimeout(resolve, progressSpeed));\n    }\n    setIsSolved(true);\n    setIsSolving(false);\n  };\n\n  const handleSolveButtonClicked = () => {\n    setIsSolving(true);\n    setIsSolved(false);\n    setStartGrid(grid.map((arr) => arr.slice()));\n    const progress = sudokuService.solve(grid);\n    if (isShowProcessChecked) {\n      showProgress(progress);\n    } else {\n      setIsGridDisabled(true);\n      setGrid(progress[progress.length - 1]);\n      setIsSolved(true);\n      setIsSolving(false);\n    }\n  };\n\n  const reset = () => {\n    setGrid(EMPTY_GRID);\n    setStartGrid(EMPTY_START_GRID);\n    setIsGridDisabled(false);\n    setIsSolved(false);\n    storageService.setBoard(EMPTY_GRID());\n  };\n\n  const undo = () => {\n    setIsGridDisabled(false);\n    setGrid(startGrid);\n    setStartGrid(EMPTY_START_GRID);\n    setIsSolved(false);\n  };\n\n  return (\n    <Row className=\"mt-4\">\n      <Col sm={8} className=\"mb-5\">\n        <Board\n          startGrid={startGrid}\n          grid={grid}\n          onChange={handleValueChange}\n          disabled={isGridDisabled}\n        />\n      </Col>\n      <Col lg className=\"mb-5\">\n        <Card className=\"shadow\">\n          <Card.Body>\n            <Button\n              variant=\"dark\"\n              disabled={isSolving}\n              onClick={() => {\n                reset();\n                const randomGrid = sudokuService.getRandomExample();\n                setGrid(randomGrid);\n                storageService.setBoard(randomGrid);\n              }}\n            >\n              Randomly Generated Board\n            </Button>\n            <br />\n            {isSolving ? (\n              <Button\n                className=\"mt-3\"\n                variant=\"dark\"\n                onClick={() => window.location.reload()}\n              >\n                Stop\n              </Button>\n            ) : (\n              <Button\n                className=\"mt-3\"\n                variant=\"dark\"\n                onClick={handleSolveButtonClicked}\n              >\n                Solve\n              </Button>\n            )}\n            <FormCheck\n              className=\"mt-3\"\n              type=\"checkbox\"\n              label=\"Show solving process\"\n              disabled={isSolving}\n              checked={isShowProcessChecked}\n              onChange={(e) => setIsShowProcessChecked(e.target.checked)}\n            />\n            {isShowProcessChecked ? (\n              <p className=\"mt-3 text-danger\">\n                If you show solving process on difficult sudoku puzzles it can\n                take very long time. Uncheck show solving process if you wanna\n                solve difficult puzzles.\n              </p>\n            ) : (\n              \"\"\n            )}\n            <Button\n              className=\"mt-3 mr-1\"\n              variant=\"dark\"\n              disabled={isSolving}\n              onClick={reset}\n            >\n              Clear\n            </Button>\n            <Button\n              className=\"mt-3 ml-1\"\n              variant=\"dark\"\n              disabled={!isSolved}\n              onClick={undo}\n            >\n              <i className=\"fas fa-undo\" />\n            </Button>\n          </Card.Body>\n        </Card>\n      </Col>\n    </Row>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}