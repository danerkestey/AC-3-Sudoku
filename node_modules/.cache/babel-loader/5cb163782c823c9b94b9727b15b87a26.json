{"ast":null,"code":"export const EMPTY_GRID = () => new Array(9).fill(null).map(() => new Array(9).fill(0));\n_c = EMPTY_GRID;\nexport const EMPTY_START_GRID = () => new Array(9).fill(null).map(() => new Array(9));\n_c2 = EMPTY_START_GRID;\nclass SudokuService {\n  constructor() {\n    this.solvingProcess = [];\n  }\n  getRandomExample() {\n    const examples = [[[0, 0, 3, 0, 0, 0, 0, 0, 0], [5, 8, 0, 2, 0, 0, 3, 0, 9], [2, 0, 0, 4, 0, 5, 8, 7, 1], [3, 7, 0, 0, 1, 0, 5, 9, 0], [8, 0, 0, 7, 4, 0, 1, 3, 0], [0, 2, 9, 0, 0, 8, 0, 0, 0], [6, 0, 0, 1, 0, 3, 4, 0, 7], [4, 0, 2, 0, 6, 0, 0, 0, 0], [0, 0, 0, 5, 2, 4, 6, 8, 0]], [[4, 0, 0, 0, 5, 0, 0, 3, 2], [0, 1, 0, 0, 9, 0, 7, 0, 5], [7, 5, 3, 0, 0, 4, 1, 9, 6], [0, 0, 1, 0, 7, 0, 0, 0, 0], [6, 0, 9, 0, 0, 1, 2, 5, 0], [0, 0, 0, 5, 0, 0, 6, 1, 3], [3, 0, 4, 0, 0, 8, 0, 0, 1], [0, 0, 0, 4, 0, 0, 0, 7, 8], [0, 0, 0, 7, 6, 3, 0, 2, 9]], [[0, 0, 4, 2, 7, 6, 0, 3, 0], [0, 5, 7, 1, 0, 0, 0, 4, 9], [0, 0, 0, 9, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0, 9, 6, 0], [0, 0, 0, 0, 0, 7, 1, 8, 5], [0, 0, 0, 0, 2, 0, 3, 0, 4], [0, 0, 0, 7, 0, 1, 0, 9, 0], [0, 0, 0, 6, 0, 0, 2, 1, 0], [1, 0, 6, 0, 8, 0, 0, 0, 0]]];\n    return examples[Math.floor(Math.random() * examples.length)];\n  }\n  findEmpty(grid) {\n    for (let i = 0; i < grid.length; i++) {\n      for (let j = 0; j < grid[i].length; j++) {\n        if (grid[i][j] === 0) return {\n          i,\n          j\n        };\n      }\n    }\n    return false;\n  }\n  isSafe(grid, row, col, num) {\n    for (let i = 0; i < grid.length; i++) {\n      if (grid[i][col] === num && i !== row) return false;\n      if (grid[row][i] === num && i !== col) return false;\n    }\n    const x = Math.floor(row / 3) * 3;\n    const y = Math.floor(col / 3) * 3;\n    for (let i = x; i < x + 3; i++) {\n      for (let j = y; j < y + 3; j++) {\n        if (grid[i][j] === num && i !== row && j !== col) return false;\n      }\n    }\n    return true;\n  }\n  solveRecursive(grid) {\n    this.solvingProcess.push(grid.map(arr => arr.slice()));\n    const find = this.findEmpty(grid);\n    let position;\n    const nums = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    if (find) {\n      position = find;\n    } else return true;\n    while (nums.length !== 0) {\n      const num = nums[0];\n      if (this.isSafe(grid, position.i, position.j, num)) {\n        grid[position.i][position.j] = Number(num);\n        if (this.solveRecursive(grid)) return true;\n        grid[position.i][position.j] = 0;\n      }\n      nums.shift();\n    }\n    return false;\n  }\n  solve(grid) {\n    this.solvingProcess = [];\n    this.solveRecursive(grid);\n    return this.solvingProcess;\n  }\n}\nexport default new SudokuService();\nvar _c, _c2;\n$RefreshReg$(_c, \"EMPTY_GRID\");\n$RefreshReg$(_c2, \"EMPTY_START_GRID\");","map":{"version":3,"names":["EMPTY_GRID","Array","fill","map","EMPTY_START_GRID","SudokuService","solvingProcess","getRandomExample","examples","Math","floor","random","length","findEmpty","grid","i","j","isSafe","row","col","num","x","y","solveRecursive","push","arr","slice","find","position","nums","Number","shift","solve"],"sources":["/Users/saifal-dinali/Desktop/Projects/School Projects/CP468/AC-3-Sudoku/src/sudokuService.js"],"sourcesContent":["export const EMPTY_GRID = () =>\n  new Array(9).fill(null).map(() => new Array(9).fill(0));\nexport const EMPTY_START_GRID = () =>\n  new Array(9).fill(null).map(() => new Array(9));\n\nclass SudokuService {\n  solvingProcess = [];\n\n  getRandomExample() {\n    const examples = [\n      [\n        [0, 0, 3, 0, 0, 0, 0, 0, 0],\n        [5, 8, 0, 2, 0, 0, 3, 0, 9],\n        [2, 0, 0, 4, 0, 5, 8, 7, 1],\n        [3, 7, 0, 0, 1, 0, 5, 9, 0],\n        [8, 0, 0, 7, 4, 0, 1, 3, 0],\n        [0, 2, 9, 0, 0, 8, 0, 0, 0],\n        [6, 0, 0, 1, 0, 3, 4, 0, 7],\n        [4, 0, 2, 0, 6, 0, 0, 0, 0],\n        [0, 0, 0, 5, 2, 4, 6, 8, 0],\n      ],\n      [\n        [4, 0, 0, 0, 5, 0, 0, 3, 2],\n        [0, 1, 0, 0, 9, 0, 7, 0, 5],\n        [7, 5, 3, 0, 0, 4, 1, 9, 6],\n        [0, 0, 1, 0, 7, 0, 0, 0, 0],\n        [6, 0, 9, 0, 0, 1, 2, 5, 0],\n        [0, 0, 0, 5, 0, 0, 6, 1, 3],\n        [3, 0, 4, 0, 0, 8, 0, 0, 1],\n        [0, 0, 0, 4, 0, 0, 0, 7, 8],\n        [0, 0, 0, 7, 6, 3, 0, 2, 9],\n      ],\n      [\n        [0, 0, 4, 2, 7, 6, 0, 3, 0],\n        [0, 5, 7, 1, 0, 0, 0, 4, 9],\n        [0, 0, 0, 9, 0, 0, 0, 0, 0],\n        [3, 0, 0, 0, 0, 0, 9, 6, 0],\n        [0, 0, 0, 0, 0, 7, 1, 8, 5],\n        [0, 0, 0, 0, 2, 0, 3, 0, 4],\n        [0, 0, 0, 7, 0, 1, 0, 9, 0],\n        [0, 0, 0, 6, 0, 0, 2, 1, 0],\n        [1, 0, 6, 0, 8, 0, 0, 0, 0],\n      ],\n    ];\n    return examples[Math.floor(Math.random() * examples.length)];\n  }\n\n  findEmpty(grid) {\n    for (let i = 0; i < grid.length; i++) {\n      for (let j = 0; j < grid[i].length; j++) {\n        if (grid[i][j] === 0) return { i, j };\n      }\n    }\n    return false;\n  }\n\n  isSafe(grid, row, col, num) {\n    for (let i = 0; i < grid.length; i++) {\n      if (grid[i][col] === num && i !== row) return false;\n      if (grid[row][i] === num && i !== col) return false;\n    }\n\n    const x = Math.floor(row / 3) * 3;\n    const y = Math.floor(col / 3) * 3;\n\n    for (let i = x; i < x + 3; i++) {\n      for (let j = y; j < y + 3; j++) {\n        if (grid[i][j] === num && i !== row && j !== col) return false;\n      }\n    }\n\n    return true;\n  }\n\n  solveRecursive(grid) {\n    this.solvingProcess.push(grid.map((arr) => arr.slice()));\n    const find = this.findEmpty(grid);\n    let position;\n    const nums = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\n    if (find) {\n      position = find;\n    } else return true;\n\n    while (nums.length !== 0) {\n      const num = nums[0];\n\n      if (this.isSafe(grid, position.i, position.j, num)) {\n        grid[position.i][position.j] = Number(num);\n        if (this.solveRecursive(grid)) return true;\n        grid[position.i][position.j] = 0;\n      }\n      nums.shift();\n    }\n\n    return false;\n  }\n\n  solve(grid) {\n    this.solvingProcess = [];\n    this.solveRecursive(grid);\n    return this.solvingProcess;\n  }\n}\n\nexport default new SudokuService();\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}