{"ast":null,"code":"export const EMPTY_GRID = () => new Array(9).fill(null).map(() => new Array(9).fill(0));\nexport const EMPTY_START_GRID = () => new Array(9).fill(null).map(() => new Array(9));\n\nclass SudokuService {\n  constructor() {\n    this.solvingProcess = [];\n  }\n\n  getRandomExample() {\n    const examples = [[[0, 0, 3, 0, 0, 0, 0, 0, 0], [5, 8, 0, 2, 0, 0, 3, 0, 9], [2, 0, 0, 4, 0, 5, 8, 7, 1], [3, 7, 0, 0, 1, 0, 5, 9, 0], [8, 0, 0, 7, 4, 0, 1, 3, 0], [0, 2, 9, 0, 0, 8, 0, 0, 0], [6, 0, 0, 1, 0, 3, 4, 0, 7], [4, 0, 2, 0, 6, 0, 0, 0, 0], [0, 0, 0, 5, 2, 4, 6, 8, 0]], [[4, 0, 0, 0, 5, 0, 0, 3, 2], [0, 1, 0, 0, 9, 0, 7, 0, 5], [7, 5, 3, 0, 0, 4, 1, 9, 6], [0, 0, 1, 0, 7, 0, 0, 0, 0], [6, 0, 9, 0, 0, 1, 2, 5, 0], [0, 0, 0, 5, 0, 0, 6, 1, 3], [3, 0, 4, 0, 0, 8, 0, 0, 1], [0, 0, 0, 4, 0, 0, 0, 7, 8], [0, 0, 0, 7, 6, 3, 0, 2, 9]], [[0, 0, 4, 2, 7, 6, 0, 3, 0], [0, 5, 7, 1, 0, 0, 0, 4, 9], [0, 0, 0, 9, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0, 9, 6, 0], [0, 0, 0, 0, 0, 7, 1, 8, 5], [0, 0, 0, 0, 2, 0, 3, 0, 4], [0, 0, 0, 7, 0, 1, 0, 9, 0], [0, 0, 0, 6, 0, 0, 2, 1, 0], [1, 0, 6, 0, 8, 0, 0, 0, 0]]];\n    return examples[Math.floor(Math.random() * examples.length)];\n  }\n\n  findEmpty(grid) {\n    for (let i = 0; i < grid.length; i++) {\n      for (let j = 0; j < grid[i].length; j++) {\n        if (grid[i][j] === 0) return {\n          i,\n          j\n        };\n      }\n    }\n\n    return false;\n  }\n\n  isSafe(grid, row, col, num) {\n    for (let i = 0; i < grid.length; i++) {\n      if (grid[i][col] === num && i !== row) return false;\n      if (grid[row][i] === num && i !== col) return false;\n    }\n\n    const x = Math.floor(row / 3) * 3;\n    const y = Math.floor(col / 3) * 3;\n\n    for (let i = x; i < x + 3; i++) {\n      for (let j = y; j < y + 3; j++) {\n        if (grid[i][j] === num && i !== row && j !== col) return false;\n      }\n    }\n\n    return true;\n  }\n\n  solveRecursive(grid) {\n    this.solvingProcess.push(grid.map(arr => arr.slice()));\n    const find = this.findEmpty(grid);\n    let position;\n    const nums = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\n    if (find) {\n      position = find;\n    } else return true;\n\n    while (nums.length !== 0) {\n      const num = nums[0];\n\n      if (this.isSafe(grid, position.i, position.j, num)) {\n        grid[position.i][position.j] = Number(num);\n        if (this.solveRecursive(grid)) return true;\n        grid[position.i][position.j] = 0;\n      }\n\n      nums.shift();\n    }\n\n    return false;\n  }\n\n  solve(grid) {\n    this.solvingProcess = [];\n    this.solveRecursive(grid);\n    return this.solvingProcess;\n  }\n\n}\n\nexport default new SudokuService();","map":{"version":3,"sources":["/Users/saifal-dinali/Desktop/Projects/School Projects/CP468/AC-3-Sudoku/src/sudokuService.js"],"names":["EMPTY_GRID","Array","fill","map","EMPTY_START_GRID","SudokuService","solvingProcess","getRandomExample","examples","Math","floor","random","length","findEmpty","grid","i","j","isSafe","row","col","num","x","y","solveRecursive","push","arr","slice","find","position","nums","Number","shift","solve"],"mappings":"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","sourcesContent":["export const EMPTY_GRID = () =>\n  new Array(9).fill(null).map(() => new Array(9).fill(0));\nexport const EMPTY_START_GRID = () =>\n  new Array(9).fill(null).map(() => new Array(9));\n\nclass SudokuService {\n  solvingProcess = [];\n\n  getRandomExample() {\n    const examples = [\n      [\n        [0, 0, 3, 0, 0, 0, 0, 0, 0],\n        [5, 8, 0, 2, 0, 0, 3, 0, 9],\n        [2, 0, 0, 4, 0, 5, 8, 7, 1],\n        [3, 7, 0, 0, 1, 0, 5, 9, 0],\n        [8, 0, 0, 7, 4, 0, 1, 3, 0],\n        [0, 2, 9, 0, 0, 8, 0, 0, 0],\n        [6, 0, 0, 1, 0, 3, 4, 0, 7],\n        [4, 0, 2, 0, 6, 0, 0, 0, 0],\n        [0, 0, 0, 5, 2, 4, 6, 8, 0],\n      ],\n      [\n        [4, 0, 0, 0, 5, 0, 0, 3, 2],\n        [0, 1, 0, 0, 9, 0, 7, 0, 5],\n        [7, 5, 3, 0, 0, 4, 1, 9, 6],\n        [0, 0, 1, 0, 7, 0, 0, 0, 0],\n        [6, 0, 9, 0, 0, 1, 2, 5, 0],\n        [0, 0, 0, 5, 0, 0, 6, 1, 3],\n        [3, 0, 4, 0, 0, 8, 0, 0, 1],\n        [0, 0, 0, 4, 0, 0, 0, 7, 8],\n        [0, 0, 0, 7, 6, 3, 0, 2, 9],\n      ],\n      [\n        [0, 0, 4, 2, 7, 6, 0, 3, 0],\n        [0, 5, 7, 1, 0, 0, 0, 4, 9],\n        [0, 0, 0, 9, 0, 0, 0, 0, 0],\n        [3, 0, 0, 0, 0, 0, 9, 6, 0],\n        [0, 0, 0, 0, 0, 7, 1, 8, 5],\n        [0, 0, 0, 0, 2, 0, 3, 0, 4],\n        [0, 0, 0, 7, 0, 1, 0, 9, 0],\n        [0, 0, 0, 6, 0, 0, 2, 1, 0],\n        [1, 0, 6, 0, 8, 0, 0, 0, 0],\n      ],\n    ];\n    return examples[Math.floor(Math.random() * examples.length)];\n  }\n\n  findEmpty(grid) {\n    for (let i = 0; i < grid.length; i++) {\n      for (let j = 0; j < grid[i].length; j++) {\n        if (grid[i][j] === 0) return { i, j };\n      }\n    }\n    return false;\n  }\n\n  isSafe(grid, row, col, num) {\n    for (let i = 0; i < grid.length; i++) {\n      if (grid[i][col] === num && i !== row) return false;\n      if (grid[row][i] === num && i !== col) return false;\n    }\n\n    const x = Math.floor(row / 3) * 3;\n    const y = Math.floor(col / 3) * 3;\n\n    for (let i = x; i < x + 3; i++) {\n      for (let j = y; j < y + 3; j++) {\n        if (grid[i][j] === num && i !== row && j !== col) return false;\n      }\n    }\n\n    return true;\n  }\n\n  solveRecursive(grid) {\n    this.solvingProcess.push(grid.map((arr) => arr.slice()));\n    const find = this.findEmpty(grid);\n    let position;\n    const nums = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\n    if (find) {\n      position = find;\n    } else return true;\n\n    while (nums.length !== 0) {\n      const num = nums[0];\n\n      if (this.isSafe(grid, position.i, position.j, num)) {\n        grid[position.i][position.j] = Number(num);\n        if (this.solveRecursive(grid)) return true;\n        grid[position.i][position.j] = 0;\n      }\n      nums.shift();\n    }\n\n    return false;\n  }\n\n  solve(grid) {\n    this.solvingProcess = [];\n    this.solveRecursive(grid);\n    return this.solvingProcess;\n  }\n}\n\nexport default new SudokuService();\n"]},"metadata":{},"sourceType":"module"}